/* 
 * Andrea van den Hooff
 * 10439080
 * Premaster Software Engineering
 * array.cvc: implements printing & scanning of (multidimensional) arrays,
 * required by Assignment 1.3.
 */

#include <civic.h>

/* Print a vector / array of integers to stdout */
export void printIntVec(int[n] vec)
{
    for (int i = 0, n)
    {
        printInt(vec[i]);
        printSpaces(1);
    }
    printNewlines(1);
}

/* Print a vector / array of floats to stdout */
export void printFloatVec(float[n] vec)
{
    for (int i = 0, n)
    {
        printFloat(vec[i]);
        printSpaces(1);
    }
    printNewlines(1);
}

/* Print a matrix of integers to stdout. */
export void printIntMat(int[m, n] mat)
{
    for (int i = 0, m)
    {
        for (int j = 0, n)
        {
            printInt(mat[i, j]);
            printSpaces(1);
        }

        printNewlines(1);
    }

    printNewlines(1);
}

/* Print a matrix of floats to stdout. */
export void printFloatMat(float[m, n] mat)
{
    for (int i = 0, m)
    {
        for (int j = 0, n)
        {
            printFloat(mat[i, j]);
            printSpaces(1);
        }
        printNewlines(1);
    }
    printNewlines(1);
}

/* Scan a vector / array of integers from stdin. */
export void scanIntVec(int[n] vec)
{
    if (n > 0)
    {
        for (int i = 0, n)
            vec[i] = scanInt();
    }
}

/* Scan a vector / array of floats from stdin. */
export void scanFloatVec(float[n] vec)
{
    if (n > 0)
    {
        for (int i = 0, n)
            vec[i] = scanFloat();
    }
}

/* Scan a matrix of integers from stdin. */
export void scanIntMat(int[m, n] mat)
{
    if (n > 0 && m > 0)
    {
        for (int i = 0, m)
        {
            for (int j = 0, n)
            {
                mat[i, j] = scanInt();
            }
        }
    }
}

/* Scan a matrix of floats from stdin. */
export void scanFloatMat(float[m, n] mat)
{
    if (n > 0 && m > 0)
    {
        for (int i = 0, m)
        {
            for (int j = 0, n)
                mat[i, j] = scanFloat();
        }
    }
}

/* Multiply two floating point matrices a and b and store result in c. 
    https://en.wikipedia.org/wiki/Matrix_multiplication 
    original: matMul( float[m, k] a, float[k, n] b, float[m, n] c) */
export void matMul(float[a, b] first, float[c, d] second, float[e, f] result)
{
    float sum = 0.0;

    if (a != e || b != c || d != f)
        return;

    for (int x = 0, a)
    {
        for (int y = 0, d)
        {
            for (int z = 0, b)
                sum = sum + first[x, z] * second[z, y];

            result[x, y] = sum;
            sum = 0.0;
        }
    }

    return;
}

/* Solve the well known 8 Queens problem. */
// queens(bool[m, n] a) {}
